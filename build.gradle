buildscript {
    ext.kotlin_version = '1.2.71'

    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.2.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
plugins {
    id 'com.gradle.build-scan' version '1.10.2'
    id("jmfayard.github.io.gradle-kotlin-dsl-libs") version "0.2.6"  // $ ./gradlew syncLibs
}
apply plugin: "com.android.application"
apply plugin: 'kotlin-android'


def versions = [
        "constraint": "1.0.2",
        "espresso": "3.0.1",
        "junit": "4.12",
        "KotlinAndroidViewBindings": "0.12",
        "kotlintest" : "2.0.7",
        "magellan": "1.0.0",
        "slimadapter" : "2.1.2",
        "support": "27.0.2",
        "timber": "4.6.0",
]

repositories {
    google()
    jcenter()
    maven { url 'https://jitpack.io' }

}




android {

    compileSdkVersion 27

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 1
        versionName "1.0.0"
        applicationId "com.wealthfront.magellan.kotlinsample"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    packagingOptions {
        exclude "LICENSE.txt"
    }
}

dependencies {

    // Magellan, the Simplest Navigation for Android
    // https://github.com/wealthfront/magellan
    compile "com.wealthfront:magellan:${versions.magellan}"
    compile "com.wealthfront:magellan-support:${versions.magellan}"

    // http://marcinmoskala.com/android/kotlin/2017/05/05/still-mvp-or-already-mvvm.html
    compile "com.github.MarcinMoskala:KotlinAndroidViewBindings:${versions.KotlinAndroidViewBindings}"


    // Kotlin
    compile("org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version")

    // Google Libs
    compile "com.android.support:support-v4:${versions.support}"
    compile "com.android.support:appcompat-v7:${versions.support}"
    compile "com.android.support:preference-v7:${versions.support}"
    compile "com.android.support:design:${versions.support}"
    compile "com.android.support:percent:${versions.support}"
    compile "com.android.support:cardview-v7:${versions.support}"
    compile "com.android.support.constraint:constraint-layout:${versions.constraint}"
    compile "com.android.support:multidex:1.0.2"


    // https://github.com/JakeWharton/timber
    compile "com.jakewharton.timber:timber:${versions.timber}"

    // https://github.com/MEiDIK/SlimAdapter
    // A slim & clean & typeable Adapter without# VIEWHOLDER
    compile "net.idik:slimadapter:${versions.slimadapter}"


    /** JSR-305 nullability annotations: **/
    compileOnly "com.google.code.findbugs:jsr305:3.0.2"
    testCompileOnly "com.google.code.findbugs:jsr305:3.0.2"

    /** Testing
     KotlinTest DSL https://github.com/kotlintest/kotlintest/blob/master/doc/reference.md
     KotlinTest Matchers: https://github.com/kotlintest/kotlintest/blob/master/doc/matchers.md
     Mockito-Kotlin https://github.com/nhaarman/mockito-kotlin/wiki/Mocking-and-verifying
     **/
    testCompile "io.kotlintest:kotlintest:${versions.kotlintest}"
    testCompile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "com.nhaarman:mockito-kotlin:1.5.0"
    testCompile "junit:junit:${versions.junit}"

    androidTestCompile "io.kotlintest:kotlintest:${versions.kotlintest}"
    androidTestCompile "com.android.support.test.espresso:espresso-core:${versions.espresso}"
    androidTestCompile "com.android.support.test.espresso:espresso-contrib:${versions.espresso}"

}


configurations.all {
    resolutionStrategy {
        force "com.android.support:appcompat-v7:${versions.support}"
        force "com.android.support:preference-v7:${versions.support}"
        force "com.android.support.constraint:constraint-layout:${versions.constraint}"
        force "com.android.support:design:${versions.support}"
        force "com.android.support:percent:${versions.support}"
        force "com.android.support:support-v13:${versions.support}"
        force "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        force "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        force "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    }
}


buildScan {
// Uncomment the lines below to agree to the Terms of Service.
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = "yes"
    tag "SAMPLE"
    link "GitHub", 'https://github.com/gradle/gradle-build-scan-quickstart'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
    }
}

task printProperties {
    group = 'help'
    doLast {
        def properties = ['org.gradle.java.home', 'org.gradle.jvmargs']
        def systemProperties = ['file.encoding', 'user.country', 'user.language', 'java.io.tmpdir', 'user.variant']
        println("Detecting what could cause incompatible gradle daemons")
        println("Run './gradlew printProperties' from the command-line and the same task Android studio")
        println("See https://docs.gradle.org/4.1/userguide/build_environment.html")
        println("See https://docs.gradle.org/4.1/userguide/gradle_daemon.html#daemon_faq")
        println()
        println "JAVA_HOME=" + System.getenv("JAVA_HOME")
        properties.forEach { prop -> println(prop + "=" + project.findProperty(prop)) }
        systemProperties.forEach { prop -> println(prop + "=" + System.properties[prop]) }
    }
}
